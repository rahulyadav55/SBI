package com.epay.merchant.dao;

import com.epay.merchant.config.MerchantConfig;
import com.epay.merchant.dto.ErrorDto;
import com.epay.merchant.entity.KeyManagement;
import com.epay.merchant.entity.NotificationManagement;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.externalservice.KmsClient;
import com.epay.merchant.externalservice.response.KMSAPIKeysResponse;
import com.epay.merchant.model.request.KeyGenerationRequest;
import com.epay.merchant.repository.KeyRepository;
import com.epay.merchant.util.enums.KeyType;
import com.epay.merchant.util.enums.MerchantStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Pageable;

import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class KeyDaoTest {

    @InjectMocks
    private KeyDao keyDao;

    @Mock
    private KmsClient kmsClient;

    @Mock
    private KeyRepository keyRepository;

    @Mock
    private MerchantConfig merchantConfig;

    @Mock
    private NotificationDao notificationDao;

    @Mock
    private MerchantInfoDao merchantInfoDao;

    private static final String MID = "testMerchant";
    private static final UUID KEY_ID = UUID.randomUUID();

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGenerateApiKey_Success() {
        // Arrange
        KMSAPIKeysResponse apiKeysResponse = new KMSAPIKeysResponse();
        apiKeysResponse.setId(KEY_ID);
        when(kmsClient.generateAPIKeys(anyString(), anyLong())).thenReturn(apiKeysResponse);
        when(keyRepository.save(any(KeyManagement.class))).thenReturn(KeyManagement.builder().id(KEY_ID).build());

        // Act
        KMSAPIKeysResponse response = keyDao.generateApiKey(MID);

        // Assert
        assertNotNull(response);
        assertEquals(KEY_ID, response.getId());
        verify(kmsClient, times(1)).generateAPIKeys(anyString(), anyLong());
        verify(keyRepository, times(1)).save(any(KeyManagement.class));
    }

    @Test
    void testGenerateApiKey_Failure() {
        // Arrange
        when(kmsClient.generateAPIKeys(anyString(), anyLong())).thenThrow(new MerchantException("Error"));

        // Act & Assert
        MerchantException exception = assertThrows(MerchantException.class, () -> keyDao.generateApiKey(MID));
        assertEquals("Error", exception.getMessage());
        verify(keyRepository, never()).save(any(KeyManagement.class));
    }

    @Test
    void testSaveKey() {
        // Arrange
        when(keyRepository.save(any(KeyManagement.class))).thenReturn(KeyManagement.builder().id(KEY_ID).build());

        // Act
        UUID keyId = keyDao.saveKey(MID, KeyType.API, 1, "Test Remark");

        // Assert
        assertEquals(KEY_ID, keyId);
        verify(keyRepository, times(1)).save(any(KeyManagement.class));
    }

    @Test
    void testValidatedAPIKey_Success() {
        // Arrange
        when(merchantInfoDao.isExistsByMIdAndStatus(anyString(), eq(MerchantStatus.ACTIVE.name()))).thenReturn(true);

        // Act
        boolean isValid = merchantInfoDao.isExistsByMIdAndStatus(MID, MerchantStatus.ACTIVE.name());

        // Assert
        assertTrue(isValid);
        verify(merchantInfoDao, times(1)).isExistsByMIdAndStatus(MID, MerchantStatus.ACTIVE.name());
    }

    @Test
    void testGenerateEncryptionKey_Failure() {
        // Arrange
        KeyGenerationRequest request = new KeyGenerationRequest();
        request.setMId(MID);
        when(kmsClient.generateEncryptionKeys(anyString(), anyLong(), anyLong())).thenThrow(new MerchantException("Encryption Error"));

        // Act & Assert
        MerchantException exception = assertThrows(MerchantException.class, () -> keyDao.generateEncryptionKey(request));
        assertEquals("Encryption Error", exception.getMessage());
    }
}
